@page "/employee-leave-form"

@inject IEmployeeLeaveInfoService employeeService
@inject NavigationManager navMan
@inject IGoogleService gService
@inject ProtectedSessionStorage sessionStorage

@if (ValidSubmit) 
{
    <h3 class="mt-4">Leave Submitted</h3>
}
else
{
    <div class="card">
        <EditForm Model="employeeLeave" OnValidSubmit="SaveEmployeeLeaveInfo">
            <div class="m-5">
                <div class="row">
                    <div class="me-4 col-sm-2">
                        <SfTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="First Name" @bind-Value="employee.FirstName" />
                    </div>
                    <div class="col-sm-2">
                        <SfTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="Last Name" @bind-Value="employee.LastName" />
                    </div>
                </div>
                <div class="mt-4 col-sm-1">
                    <SfDropDownList ID="leaveType" TValue="int" TItem="LeaveTypeModelDisplay" @bind-Value="leaveType.pkLeaveTypeId" PopupHeight="230px" Placeholder="Leave Type" DataSource="@leaveTypes">
                        <DropDownListEvents TItem="LeaveTypeModelDisplay" TValue="int"></DropDownListEvents>
                        <DropDownListFieldSettings Text="LeaveType" Value="pkLeaveTypeId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="row mt-4">
                    <div class="me-4 col-sm-2">
                        <SfDatePicker TValue="DateTime?" @bind-Value="leave.StartDate" Format="dd/MM/yyyy" />
                    </div>
                    <div class="col-sm-2">
                        <SfDatePicker TValue="DateTime?" @bind-Value="leave.EndDate" Format="dd/MM/yyyy">
                            <DatePickerEvents TValue="DateTime?" ValueChange="EndDateValueChangeHandler"></DatePickerEvents>
                        </SfDatePicker>
                    </div>
                </div>
                <div class="mt-3 col-sm-4">
                    <SfTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="Reason" @bind-Value="leave.Reason" />
                </div>
                <div class="row mt-3">
                    <div class="me-4 col-sm-1">
                        <SfNumericTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="Days Taken" @bind-Value="leave.DaysTaken" ShowSpinButton="false" Enabled="false" Format="#" />
                    </div>
                    <div class="col-sm-1">
                        <SfNumericTextBox FloatLabelType="FloatLabelType.Auto" Placeholder="Leave Left" @bind-Value="leaveBalance.LeaveLeft" ShowSpinButton="false" Enabled="false" Format="#" />
                    </div>
                </div>
                <button class="btn btn-success mt-4" type="submit">Submit</button>
            </div>
        </EditForm>
    </div>
}

@code {
    private EmployeeModelDisplay employee = new();
    private List<EmployeeModelDisplay> employees = new();
    private LeaveBalanceModelDisplay leaveBalance = new();
    private LeaveModelDisplay leave = new();
    private LeaveTypeModelDisplay leaveType = new();
    private List<LeaveTypeModelDisplay> leaveTypes = new();
    private EmployeeLeaveFormModel employeeLeave = new();

    private int userId;

    public bool ValidSubmit { get; set; } = false;

    protected override async Task OnInitializedAsync() 
    {
        try
        {
            await employeeService.EmployeeLeaveAuthHeader();
            leaveTypes = await employeeService.GetLeaveTypes();

            var token = await sessionStorage.GetAsync<string>("token");

            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token.Value);
            string userSub = jwt.Claims.First(c => c.Type == "sub").Value;
            userId = Convert.ToInt32(userSub);

            employee = await employeeService.GetEmployee(userId);
            leaveBalance = await employeeService.GetBalance(employee.pkEmployeeId);

            leaveBalance.LeaveLeft = leaveBalance.LeaveAllowed - leaveBalance.LeaveTaken;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async void SaveEmployeeLeaveInfo() 
    {
        try
        {
            employeeLeave = new()
            {
                fkEmployeeId = employee.pkEmployeeId,
                fkLeaveTypeId = leaveType.pkLeaveTypeId,
                StartDate = leave.StartDate,
                EndDate = leave.EndDate,
                DaysTaken = leave.DaysTaken,
                Reason = leave.Reason,
                LeaveTaken = leaveBalance.LeaveTaken,
                LeaveAllowed = leaveBalance.LeaveAllowed,
            };

            var googleEmployeeEvent = new
            {
                Summary = leave.Reason,
                Start = new[] 
                {
                    new { dateTime = leave.StartDate }
                },
                End = new[] 
                {
                    new { dateTime = leave.EndDate }
                }
            };

            LeaveModelDisplay newLeave = new()
            {
                fkEmployeeId = employeeLeave.fkEmployeeId,
                fkLeaveTypeId = employeeLeave.fkLeaveTypeId,
                StartDate = employeeLeave.StartDate,
                EndDate = employeeLeave.EndDate,
                Reason = employeeLeave.Reason,
                DaysTaken = employeeLeave.DaysTaken
            };

            await employeeService.SaveLeave(newLeave);
            await gService.CreateEvent(googleEmployeeEvent);
        }
        catch (Exception)
        {
            throw;
        }

        ValidSubmit = true;

        await InvokeAsync(StateHasChanged);
    }

    public void EndDateValueChangeHandler(ChangedEventArgs<DateTime?> args)
    {
        var date = leave.StartDate;
        var leaveDays = 0;
        while (date <= leave.EndDate)
        {
            if (date.Value.DayOfWeek.ToString() != "Saturday" && date.Value.DayOfWeek.ToString() != "Sunday") 
            {
                leaveDays += 1;
            }
            date = date.Value.AddDays(1);
        }
        leave.DaysTaken = leaveDays;
    }
}
