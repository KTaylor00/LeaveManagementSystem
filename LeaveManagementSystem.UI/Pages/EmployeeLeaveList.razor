@page "/employee-leave-list"

@inject IEmployeeLeaveInfoService employeeService
@inject ProtectedSessionStorage sessionStorage

<SfGrid @ref="LeaveInfoGrid" DataSource="employeesLeaveInfo" EnableAdaptiveUI="true" AdaptiveUIMode="AdaptiveMode.Both">
    <GridColumns>
        <GridColumn Field="@nameof(employeeLeave.FullName)" HeaderText="Name" />
        <GridColumn Field="@nameof(employeeLeave.StartDate)" HeaderText="Start Date" Format="dd/MM/yy" />
        <GridColumn Field="@nameof(employeeLeave.EndDate)" HeaderText="End Date" Format="dd/MM/yy" />
        <GridColumn Field="@nameof(employeeLeave.Reason)" HeaderText="Reason" />
        <GridColumn Field="@nameof(employeeLeave.LeaveType)" HeaderText="Leave Type" />
        <GridColumn Field="@nameof(employeeLeave.LeaveTaken)" HeaderText="Leave Taken" Format="#" />
        <GridColumn Field="@nameof(employeeLeave.LeaveLeft)" HeaderText="Leave Left" Format="#" />
        <GridColumn Field="@nameof(employeeLeave.Approval)" HeaderText="Approved" />
        <GridColumn Field="@nameof(employeeLeave.ApprovedBy)" HeaderText="Approved By" />
        <GridColumn Field="@nameof(employeeLeave.DateApproved)" HeaderText="Date Approved" Format="dd/MM/yy" />
    </GridColumns>
</SfGrid>

@code {
    private List<EmployeeLeaveFormModel> employeesLeaveInfo = new();
    private EmployeeLeaveFormModel? employeeLeave;
    private EmployeeModelDisplay employee = new();
    private List<EmployeeModelDisplay> employees = new();
    private SfGrid<EmployeeLeaveFormModel>? LeaveInfoGrid;
    private LeaveApprovalModelDisplay leaveApproval = new();

    private int userId;

    protected override async Task OnInitializedAsync()  
    {
        await employeeService.EmployeeLeaveAuthHeader();
        var token = await sessionStorage.GetAsync<string>("token");

        var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token.Value);
        string userSub = jwt.Claims.First(c => c.Type == "sub").Value;
        userId = Convert.ToInt32(userSub);

        employee = await employeeService.GetEmployee(userId);
        var leave = await employeeService.GetLeaveData(employee.pkEmployeeId);
        leaveApproval = await employeeService.GetLeaveApproval(employee.pkEmployeeId);
        var leaveBalance = await employeeService.GetBalance(employee.pkEmployeeId);

        employeeLeave = new()
        {
            FullName = employee.FirstName + ' ' + employee.LastName,
            StartDate = leave.StartDate,
            EndDate = leave.EndDate,
            Reason = leave.Reason,
            LeaveType = leave.LeaveType,
            LeaveTaken = leaveBalance.LeaveTaken,
            LeaveLeft = leaveBalance.LeaveAllowed - leaveBalance.LeaveTaken,
            Approved = leaveApproval.Approved,
            ApprovedBy = leaveApproval.ApprovedBy,
            DateApproved = leaveApproval.DateApproved,
        };

        if (employeeLeave.Approved)
        {
            employeeLeave.Approval = "Approved";
        }
        else
        {
            employeeLeave.Approval = "Not Approved";
        }

        if (!employeesLeaveInfo.Exists(name => name.FullName == employeeLeave.FullName))
            employeesLeaveInfo.Add(employeeLeave);

        await LeaveInfoGrid!.Refresh();
    }
}
